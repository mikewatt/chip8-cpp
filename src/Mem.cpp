#include "Mem.h"
#include <fstream>

static constexpr int MEM_SIZE = 3584;

static const uint8_t ROM[] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
};

Mem::Mem()
    : m_rom(ROM, ROM + sizeof(ROM))
    , m_memory(MEM_SIZE, 0)
{
}

bool Mem::init_from_file(const char* filename)
{
    std::fill(m_memory.begin(), m_memory.end(), 0);
    std::ifstream infile(filename, std::ios::binary);
    if (!infile.is_open()) {
        return false;
    }
    infile.read(reinterpret_cast<char *>(m_memory.data()), MEM_SIZE);
    return true;
}

uint8_t Mem::read(uint16_t addr) const
{
    if (addr >= 0x200 && addr <= 0x0FFF) {
        uint8_t val = m_memory[addr - 0x200];
        return val;
    }

    if (addr >= 0x0 && addr < m_rom.size()) {
        uint8_t val = m_rom[addr];
        return val;
    }

    return 0;
}

void Mem::write(uint16_t addr, uint8_t value)
{
    if (addr >= 0x200 && addr <= 0x0FFF) {
        m_memory[addr - 0x200] = value;
    }
}
